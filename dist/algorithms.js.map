{"version":3,"file":"algorithms.js","mappings":"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","sources":["webpack://data-structures-and-algorithms-by-javascript/./src/code/1.LinkList.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/10.DoublyCircularLinkList.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/11.Queue.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/13.Set.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/14.Dictionary.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/15.HashTable.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/17.HashTableLinearProbing.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/19.BinarySearchTree.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/2.DoublyLinkedList.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/20.AVLTree.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/21.RedBlackTree.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/22.MinHeap.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/23.Graph.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/24.breadth-first-search.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/3.CircularLinkedList.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/4.SortedLinkedList.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/5.StackLinkedList.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/6.array-stack.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/7.object-stack.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/8.privite-symbol-property-Stack.js","webpack://data-structures-and-algorithms-by-javascript/./src/code/9.privite-weakmap-property-Stack.js","webpack://data-structures-and-algorithms-by-javascript/./src/sort/bubble-sort.js","webpack://data-structures-and-algorithms-by-javascript/./src/sort/heap-sort.js","webpack://data-structures-and-algorithms-by-javascript/./src/sort/selection-sort.js","webpack://data-structures-and-algorithms-by-javascript/./src/utils/index.js","webpack://data-structures-and-algorithms-by-javascript/webpack/bootstrap","webpack://data-structures-and-algorithms-by-javascript/webpack/runtime/define property getters","webpack://data-structures-and-algorithms-by-javascript/webpack/runtime/hasOwnProperty shorthand","webpack://data-structures-and-algorithms-by-javascript/webpack/runtime/make namespace object","webpack://data-structures-and-algorithms-by-javascript/./src/index.js"],"sourcesContent":["import { defaultEquals } from \"../utils/index.js\";\n\n/**\n * 1、push(element)：向链表尾部添加一个新元素\n * 2、insert(element, position)：向链表的特定位置插入一个新元素\n * 3、getElementAt(index)：返回链表中特定位置的元素。如果链表中不存在这样的元素， 则返回 undefined\n * 4、remove(element)：从链表中移除一个元素\n * 5、indexOf(element)：返回元素在链表中的索引。如果链表中没有该元素则返回-1。\n * 6、removeAt(position)：从链表的特定位置移除一个元素。\n * 7、isEmpty()：如果链表中不包含任何元素， 返回 true，如果链表长度大于 0则返回 false。\n * 8、size()：返回链表包含的元素个数，与数组的 length 属性类似。\n * 9、toString()：返回表示整个链表的字符串。由于列表项使用了 Node 类，就需要重写继承自 JavaScript 对象默认的 toString 方法，让其只输出元素的值。\n *\n */\n\nexport class Node {\n  constructor(element) {\n    this.element = element;\n    this.next = null;\n  }\n}\n\nexport class LinkList {\n  constructor(equalsFn = defaultEquals) {\n    this.count = 0;\n    this.head = null;\n    this.equalsFn = equalsFn;\n  }\n\n  // 向链表尾部添加一个新元素\n  push(element) {\n    const node = new Node(element);\n    let current;\n    if (this.head === null) {\n      this.head = node;\n    } else {\n      current = this.head;\n      while (current.next !== null) {\n        current = current.next;\n      }\n      current.next = node;\n    }\n    this.count++;\n  }\n\n  // 向链表的特定位置插入一个新元素\n  insert(element, index) {\n    if (index < 0 || index > this.count) {\n      return false;\n    }\n\n    const node = new Node(element);\n    if (index === 0) {\n      node.next = this.head;\n      this.head = node;\n    } else {\n      const previous = this.getElementAt(index - 1);\n      node.next = previous.next;\n      previous.next = node;\n    }\n    this.count++;\n  }\n\n  // 返回链表中特定位置的元素。如果链表中不存在这样的元素， 则返回 undefined\n  getElementAt(index) {\n    if (index >= 0 && index <= this.count) {\n      let node = this.head;\n      for (let i = 0; i < index && node !== null; i++) {\n        node = node.next;\n      }\n      return node;\n    }\n    return;\n  }\n\n  // 从链表中移除一个元素\n  remove(element) {\n    const index = this.indexOf(element);\n    return this.removeAt(index);\n  }\n\n  // 返回元素在链表中的索引。如果链表中没有该元素则返回-1。\n  indexOf(node) {\n    let current = this.head;\n    for (let i = 0; i < this.count; i++) {\n      if (this.equalsFn(node.element, current.element)) {\n        return i;\n      }\n      current = current.next;\n    }\n    return -1;\n  }\n\n  // 从链表的特定位置移除一个元素\n  removeAt(index) {\n    if (index < 0 || index >= this.count) {\n      return;\n    }\n    let current = this.head;\n    if (index === 0) {\n      this.head = current.next;\n    } else {\n      let previous = this.getElementAt(index - 1);\n      current = previous.next;\n      previous.next = current.next;\n    }\n    this.count--;\n    return current.element;\n  }\n\n  // 如果链表中不包含任何元素，返回 true，如果链表长度大于 0则返回 false\n  isEmpty() {\n    return this.size() === 0;\n  }\n\n  // 返回链表包含的元素个数，与数组的 length 属性类似\n  size() {\n    return this.count;\n  }\n\n  // 清空链表\n  clear() {\n    this.head = undefined;\n    this.count = 0;\n  }\n\n  // 返回表示整个链表的字符串。由于列表项使用了 Node 类，就需要重写继承自 JavaScript 对象默认的 toString 方法，让其只输出元素的值。\n  toString() {\n    if (this.head === null) {\n      return \"\";\n    }\n    let objString = `${this.head.element}`;\n    let current = this.head.next;\n    for (let i = 0; i < this.count && current != null; i++) {\n      objString = `${objString}, ${current.element}`;\n      current = current.next;\n    }\n    return objString;\n  }\n\n  // 链表反转-循环\n  linklistReverse() {\n    let current = this.head.next;\n    while (current) {\n      const temp = current.next;\n      const node = this.remove(current);\n      this.insert(node, 0);\n      current = temp;\n    }\n\n    return this;\n  }\n\n  // 链表反转-递归\n  linklistReverseByRecursion() {\n    const recursion = (node) => {\n      // 递归终止条件\n      if (!node.next) {\n        this.head = node;\n        return this.head;\n      }\n      const temp = recursion(node.next);\n\n      node.next = null; // 先清除掉 node 的 next 指针指向，递归时为了反向 next， 即 recursion(node).next = node（递推公式）\n      temp.next = node;\n      return node;\n    };\n\n    recursion(this.head);\n\n    return this;\n  }\n}\n","import { defaultEquals } from \"../utils/index.js\";\nimport { DoublyLinkedList, DoublyNode } from \"./2.DoublyLinkedList.js\";\n\nexport class DoublyCircularLinkedList extends DoublyLinkedList {\n  constructor(equalsFn = defaultEquals) {\n    super(equalsFn);\n  }\n\n  insert(element, index) {\n    if (index < 0 || index > this.count) {\n      return;\n    }\n    let node = new DoublyNode(element);\n    let current = this.head;\n    if (index === 0) {\n      if (this.count === 0) {\n        this.head = node;\n        this.tail = node;\n        this.tail.next = this.head;\n        this.head.prev = this.tail;\n      } else {\n        let previous = current.prev;\n\n        node.next = this.head;\n        this.head.prev = node;\n\n        previous.next = node;\n        node.prev = previous;\n        this.head = node;\n      }\n    } else if (index === this.count) {\n      // 从链表尾部插入元素\n      current = this.tail;\n      const head = this.head;\n\n      node.next = head;\n      head.prev = node;\n\n      current.next = node;\n      node.prev = current;\n\n      this.tail = node;\n    } else {\n      let current = this.getElementAt(index);\n      let previous = current.prev;\n\n      node.next = current;\n      current.prev = node;\n\n      node.prev = previous;\n      previous.next = node;\n    }\n    this.count++;\n    current = node;\n    return current;\n  }\n\n  push(element) {\n    let node = new DoublyNode(element);\n    if (this.isEmpty()) {\n      this.head = node;\n      this.tail = node;\n      this.tail.next = this.head;\n      this.head.prev = this.tail;\n    } else {\n      let current = this.tail;\n      const head = this.head;\n\n      node.next = head;\n      head.prev = node;\n\n      current.next = node;\n      node.prev = current;\n\n      this.tail = node;\n    }\n    this.count++;\n  }\n\n  removeAt(index) {\n    if (index < 0 || index >= this.count || this.isEmpty()) {\n      return;\n    }\n\n    let current = this.head;\n    if (index === 0) {\n      if (this.count === 1) {\n        this.tail = null;\n        this.head = null;\n      } else {\n        this.head = this.head.next;\n      }\n    } else if (index === this.count - 1) {\n      current = this.tail;\n      const previous = current.prev;\n\n      previous.next = current.next;\n      current.next.prev = previous;\n\n      this.tail = current.prev;\n    } else {\n      current = this.getElementAt(index);\n      const previous = current.prev;\n\n      previous.next = current.next;\n      current.next.prev = previous;\n    }\n    this.count--;\n    return current;\n  }\n\n  toString() {\n    if (this.head === null) {\n      return \"\";\n    }\n\n    let objString = `${this.head.element}`;\n    let current = this.head.next;\n    // 这里使用 != 而不使用 !==， 因为 current 有时可能为 undefined\n    while (current != null && current !== this.tail) {\n      objString = `${objString},${current.element}`;\n      current = current.next;\n    }\n\n    objString = `${objString},${this.tail.element}`;\n    return objString;\n  }\n\n  // 反向打印链表\n  inverseToString() {\n    if (this.tail === null) {\n      return \"\";\n    }\n    let objString = `${this.tail.element}`;\n    let previous = this.tail.prev;\n    // 这里使用 != 而不使用 !==， 因为 current 有时可能为 undefined\n    while (previous != null && previous !== this.head) {\n      objString = `${objString},${previous.element}`;\n      previous = previous.prev;\n    }\n\n    objString = `${objString},${this.head.element}`;\n    return objString;\n  }\n}\n","// enqueue(element(s))：向队列尾部添加一个（或多个）新的项。\n// dequeue()：移除队列的第一项（即排在队列最前面的项）并返回被移除的元素。\n// peek()：返回队列中第一个元素——最先被添加，也将是最先被移除的元素。队列不做任何变动（不移除元素，只返回元素信息——与Stack 类的peek 方法非常类似）。该方法在其他语言中也可以叫作front 方法。\n// isEmpty()：如果队列中不包含任何元素，返回true，否则返回false\n// size()：返回队列包含的元素个数，与数组的length 属性类似\n\nexport class Queue {\n  constructor() {\n    this.count = 0;\n    this.lowestCount = 0;\n    this.items = {};\n  }\n\n  enqueue(element) {\n    this.items[this.count] = element;\n    this.count++;\n  }\n\n  dequeue() {\n    if (this.isEmpty()) {\n      return;\n    }\n    const result = this.items[this.lowestCount];\n    delete this.items[this.lowestCount];\n    this.lowestCount++;\n    return result;\n  }\n\n  peek() {\n    if (this.isEmpty()) {\n      return;\n    }\n    return this.items[this.lowestCount];\n  }\n\n  isEmpty() {\n    return this.count - this.lowestCount === 0;\n  }\n\n  size() {\n    return this.count - this.lowestCount;\n  }\n\n  clear() {\n    this.count = 0;\n    this.lowestCount = 0;\n    this.items = {};\n  }\n\n  toString() {\n    if (this.isEmpty()) {\n      return \"\";\n    }\n    let string = `${this.items[this.lowestCount]}`;\n\n    for (let i = this.lowestCount + 1; i < this.count - this.lowestCount; i++) {\n      string = `${string},${this.items[i]}`;\n    }\n    return string;\n  }\n}\n","// add(element)：向集合添加一个新元素。\n// delete(element)：从集合移除一个元素。\n// has(element)：如果元素在集合中，返回 true，否则返回 false。\n// clear()：移除集合中的所有元素。\n// size()：返回集合所包含元素的数量。它与数组的 length 属性类似。\n// values()：返回一个包含集合中所有值（元素）的数组\n\nexport class Set {\n  constructor() {\n    this.items = {};\n  }\n\n  add(element) {\n    if (!this.has(element)) {\n      this.items[element] = element;\n      return true;\n    }\n    return false;\n  }\n\n  delete(element) {\n    if (this.has(element)) {\n      delete this.items[element];\n      return true;\n    }\n    return false;\n  }\n\n  has(element) {\n    return Object.prototype.hasOwnProperty.call(this.items, element);\n  }\n\n  clear() {\n    this.items = {};\n  }\n\n  size() {\n    return Object.keys(this.items).length;\n  }\n  values() {\n    return Object.values(this.items);\n  }\n}\n","// 1. set(key,value)：向字典中添加新元素。如果key 已经存在，那么已存在的 value 会被新的值覆盖。\n// 2. remove(key)：通过使用键值作为参数来从字典中移除键值对应的数据值。\n// 3. hasKey(key)：如果某个键值存在于该字典中，返回true，否则返回false。\n// 4. get(key)：通过以键值作为参数查找特定的数值并返回。\n// 5. clear()：删除该字典中的所有值。\n// 6. size()：返回字典所包含值的数量。与数组的length 属性类似。\n// 7. isEmpty()：在size 等于零的时候返回true，否则返回false。\n// 8. keys()：将字典所包含的所有键名以数组形式返回。\n// 9. values()：将字典所包含的所有数值以数组形式返回。\n// 10. keyValues()：将字典中所有[键，值]对返回。\n// 11. forEach(callbackFn)：迭代字典中所有的键值对。callbackFn 有两个参数：key 和 value。该方法可以在回调函数返回false 时被中止（和Array 类中的every 方法相似）。\n\nimport { defaultToString } from \"../utils/index.js\";\n\nexport class ValuePair {\n  constructor(key, value) {\n    this.key = key;\n    this.value = value;\n  }\n  toString() {\n    return `[#${this.key}, ${this.value}]`;\n  }\n}\n\nexport class Dictionary {\n  constructor(toStrFn = defaultToString) {\n    this.toStrFn = toStrFn;\n    this.table = {};\n  }\n\n  // 向字典中添加新元素。如果key 已经存在，那么已存在的 value 会被新的值覆盖\n  set(key, value) {\n    if (key != null && value != null) {\n      const tableKey = this.toStrFn(key);\n      this.table[tableKey] = new ValuePair(key, value);\n      return true;\n    }\n    return false;\n  }\n\n  // remove(key)：通过使用键值作为参数来从字典中移除键值对应的数据值。\n  remove(key) {\n    if (this.hasKey(key)) {\n      delete this.table[this.toStrFn(key)];\n      return true;\n    }\n    return false;\n  }\n\n  // 如果某个键值存在于该字典中，返回true，否则返回false。\n  hasKey(key) {\n    const tableKey = this.toStrFn(key);\n    return this.table[tableKey] != null;\n  }\n\n  // 通过以键值作为参数查找特定的数值并返回。\n  get(key) {\n    if (this.hasKey(key)) {\n      return this.table[this.toStrFn(key)].value;\n    }\n    return;\n  }\n\n  // 删除该字典中的所有值。\n  clear() {\n    this.table = {};\n  }\n\n  // 返回字典所包含值的数量。与数组的length 属性类似。\n  size() {\n    return Object.keys(this.table).length;\n  }\n\n  // 在size 等于零的时候返回true，否则返回false。\n  isEmpty() {\n    return this.size() === 0;\n  }\n\n  // 将字典所包含的所有键名以数组形式返回\n  keys() {\n    return this.keyValues.map((valuePair) => valuePair.key);\n  }\n\n  // 将字典所包含的所有数值以数组形式返回\n  values() {\n    return this.keyValues.map((valuePair) => valuePair.value);\n  }\n\n  // 将字典中所有[键，值]对返回\n  keyValues() {\n    return Object.values(this.table);\n  }\n\n  // 迭代字典中所有的键值对。callbackFn 有两个参数：key 和 value。该方法可以在回调函数返回false 时被中止（和Array 类中的every 方法相似）\n  forEach(callbackFn) {\n    const valuePairs = this.keyValues();\n    for (let i = 0; i < valuePairs.length; i++) {\n      const result = callbackFn(valuePairs[i].key, valuePairs[i].value);\n      if (result === false) {\n        break;\n      }\n    }\n  }\n}\n","// put(key,value)：向散列表增加一个新的项（也能更新散列表）。\n// remove(key)：根据键值从散列表中移除值。\n// get(key)：返回根据键值检索到的特定的值。\n\nimport { defaultToString } from \"../utils/index.js\";\nimport { ValuePair } from \"./14.Dictionary.js\";\n\nexport class HashTable {\n  constructor(toStrFn = defaultToString) {\n    this.toStrFn = toStrFn;\n    this.table = {};\n  }\n\n  // 散列函数\n  loseloseHashCode(key) {\n    if (typeof key === \"number\") {\n      return key;\n    }\n    const tableKey = this.toStrFn(key);\n    let hash = 0;\n    for (let i = 0; i < tableKey.length; i++) {\n      hash += tableKey.charCodeAt(i);\n    }\n    return hash % 99;\n  }\n\n  hashCode(key) {\n    return this.loseloseHashCode(key);\n  }\n\n  // 向散列表增加一个新的项（也能更新散列表）。\n  put(key, value) {\n    if (key != null && value != null) {\n      const hashKey = this.hashCode(key);\n      this.table[hashKey] = new ValuePair(key, value);\n    }\n  }\n\n  // 根据键值从散列表中移除值。\n  remove(key) {\n    const hashKey = this.hashCode(key);\n    const valuePair = this.table[hashKey];\n    if (valuePair != null) {\n      delete this.table[hashKey];\n      return true;\n    }\n    return false;\n  }\n\n  // 返回根据键值检索到的特定的值。\n  get(key) {\n    const hashKey = this.hashCode(key);\n    const valuePair = this.table[hashKey];\n    return valuePair ? valuePair.value : undefined;\n  }\n}\n","import { defaultToString } from \"../utils/index.js\";\nimport { ValuePair } from \"./14.Dictionary.js\";\n\n// 散列表线性探查\nexport class HashTableLinearProbing {\n  constructor(toStrFn = defaultToString) {\n    this.toStrFn = toStrFn;\n    this.table = {};\n  }\n\n  // 散列函数\n  loseloseHashCode(key) {\n    if (typeof key === \"number\") {\n      return key;\n    }\n    const tableKey = this.toStrFn(key);\n    let hash = 0;\n    for (let i = 0; i < tableKey.length; i++) {\n      hash += tableKey.charCodeAt(i);\n    }\n    return hash % 37;\n  }\n\n  hashCode(key) {\n    return this.loseloseHashCode(key);\n  }\n\n  put(key, value) {\n    if (key != null && value != null) {\n      const position = this.hashCode(key);\n      if (this.table[position] == null) {\n        this.table[position] = new ValuePair(key, value);\n      } else {\n        let index = position + 1;\n        while (this.table[index] != null) {\n          index++;\n        }\n        this.table[index] = new ValuePair(key, value);\n      }\n      return true;\n    }\n    return false;\n  }\n\n  get(key) {\n    const position = this.hashCode(key);\n    if (this.table[position] != null) {\n      if (this.table[position].key === key) {\n        return this.table[position].value;\n      }\n      let index = position + 1;\n      while(this.table[index] != null && this.table[index].key !== key) {\n        index++;\n      }\n      if (this.table[index] != null && this.table[index].key === key) {\n        return this.table[index].value;\n      }\n    }\n  }\n\n  remove(key) {}\n}\n","import { Compare, defaultCompare } from \"../utils/index.js\";\n\nexport class Node {\n  constructor(key) {\n    this.key = key;\n    this.left = null;\n    this.right = null;\n  }\n}\n\nexport class BinarySearchTree {\n  constructor(compareFn = defaultCompare) {\n    this.compareFn = compareFn;\n    this.root = null;\n  }\n\n  // insert(key)：向树中插入一个新的键。\n  insert(key) {\n    if (this.root === null) {\n      this.root = new Node(key);\n    } else {\n      this.insertNode(this.root, key);\n    }\n  }\n\n  insertNode(node, key) {\n    if (this.compareFn(key, node.key) === Compare.LESS_THAN) {\n      if (node.left === null) {\n        node.left = new Node(key);\n      } else {\n        this.insertNode(node.left, key);\n      }\n    } else {\n      if (node.right === null) {\n        node.right = new Node(key);\n      } else {\n        this.insertNode(node.right, key);\n      }\n    }\n  }\n\n  // inOrderTraverse()：通过中序遍历方式遍历所有节点。\n  inOrderTraverse(callback) {\n    this.inOrderTraverseNode(this.root, callback);\n  }\n\n  inOrderTraverseNode(node, callback) {\n    if (node != null) {\n      this.inOrderTraverseNode(node.left, callback);\n      callback(node);\n      this.inOrderTraverseNode(node.right, callback);\n    }\n  }\n\n  // preOrderTraverse()：通过先序遍历方式遍历所有节点。\n  preOrderTraverse(callback) {\n    this.preOrderTraverseNode(this.root, callback);\n  }\n\n  preOrderTraverseNode(node, callback) {\n    if (node != null) {\n      callback(node);\n      this.preOrderTraverseNode(node.left, callback);\n      this.preOrderTraverseNode(node.right, callback);\n    }\n  }\n\n  // postOrderTraverse()：通过后序遍历方式遍历所有节点。\n  postOrderTraverse(callback) {\n    this.postOrderTraverseNode(this.root, callback);\n  }\n\n  postOrderTraverseNode(node, callback) {\n    if (node != null) {\n      this.postOrderTraverseNode(node.left, callback);\n      this.postOrderTraverseNode(node.right, callback);\n      callback(node);\n    }\n  }\n\n  // min()：返回树中最小的值/键。\n  min() {\n    return this.minNode(this.root);\n  }\n\n  minNode(node) {\n    let current = node;\n    while (current.left != null) {\n      current = current.left;\n    }\n    return current;\n  }\n\n  // max()：返回树中最大的值/键。\n  max() {\n    return this.maxNode(this.root);\n  }\n\n  maxNode(node) {\n    let current = node;\n    while (current.right != null) {\n      current = current.right;\n    }\n    return current;\n  }\n\n  // search(key)：在树中查找一个键。如果节点存在，则返回 true；如果不存在，则返回 false。\n  search(key) {\n    return this.searchNode(this.root, key);\n  }\n\n  searchNode(node, key) {\n    if (node == null) {\n      return false;\n    }\n    if (this.compareFn(key, node.key) === Compare.LESS_THAN) {\n      return this.searchNode(node.left, key);\n    } else if (this.compareFn(key, node.key) === Compare.BIGGER_THAN) {\n      return this.searchNode(node.right, key);\n    } else {\n      return true;\n    }\n  }\n\n  // remove(key)：从树中移除某个键\n  remove(key) {\n    this.removeNode(this.root, key);\n  }\n\n  removeNode(node, key) {\n    if (node == null) {\n      return null;\n    }\n    if (this.compareFn(key, node.key) === Compare.LESS_THAN) {\n      node.left = this.removeNode(node.left, key);\n      return node;\n    } else if (this.compareFn(key, node.key) === Compare.BIGGER_THAN) {\n      node.right = this.removeNode(node.right, key);\n      return node;\n    } else {\n      // case 1: 无子树时，直接将 node 置为 null，并且 return null，使得调用栈获取移除 key 后的树结构数据\n      if (node.left == null && node.right == null) {\n        node = null;\n        return node;\n      }\n      // case 2: 移除中间层的树。\n      if (node.left == null) {\n        // 当前键没有左子树，只有右子树，\n        // node = node.right 就是让中间层节点等于右子树节点。return node 中间层树的父级指向了中间层的右子树\n        node = node.right;\n        return node;\n      } else if (node.right == null) {\n        // 当前键没有右子树，只有左子树，\n        // node = node.left 就是让中间层节点等于左子树节点。return node 中间层树的父级指向了中间层的左子树\n        node = node.left;\n        return node;\n      }\n      // case 3: 移除靠近树顶部的键（离 root 很近的键）\n      // 需要找到当前键右子树的最小键，目的就是为了填补当前键被移除后的空缺\n      let aux = this.minNode(node.right);\n      node.key = aux.key;\n\n      // 填补空缺后，从右侧子树中移除最小的节点\n      node.right = this.removeNode(node.right, aux.key);\n      return node;\n    }\n  }\n}\n","import { defaultEquals } from \"../utils/index.js\";\nimport { Node, LinkList } from \"./1.LinkList.js\";\n\nexport class DoublyNode extends Node {\n  constructor(element, next, prev) {\n    super(element, next);\n    this.prev = prev;\n  }\n}\n\nexport class DoublyLinkedList extends LinkList {\n  constructor(equalsFn = defaultEquals) {\n    super(equalsFn);\n    this.tail = null;\n  }\n\n  insert(element, index) {\n    if (index < 0 || index > this.count) {\n      return false;\n    }\n    const node = new DoublyNode(element);\n    let current = this.head;\n    if (index === 0) {\n      if (this.head === null) {\n        this.head = node;\n        this.tail = node;\n      } else {\n        node.next = this.head;\n        current.prev = node;\n        this.head = node;\n      }\n    } else if (index === this.count) {\n      current = this.tail;\n      current.next = node;\n      node.prev = current;\n      this.tail = node;\n    } else {\n      const previous = this.getElementAt(index - 1);\n      current = previous.next;\n      node.next = current;\n      current.prev = node;\n      previous.next = node;\n      node.prev = previous;\n    }\n    this.count++;\n    return true;\n  }\n\n  push(element) {\n    const node = new DoublyNode(element);\n    if (this.count === 0) {\n      this.head = node;\n      this.tail = node;\n    } else {\n      let current = this.tail;\n      current.next = node;\n      node.prev = current;\n      this.tail = node;\n    }\n    this.count++;\n  }\n\n  removeAt(index) {\n    if (index < 0 || index >= this.count) {\n      return;\n    }\n    let current = this.head;\n    if (index === 0) {\n      this.head = this.head.next;\n      if (this.count === 1) {\n        this.tail = null;\n      } else {\n        this.head.prev = null;\n      }\n    } else if (index === this.count - 1) {\n      current = this.tail;\n      this.tail = current.prev;\n      current.prev = null;\n      this.tail.next = null;\n    } else {\n      current = this.getElementAt(index);\n      const previous = current.prev;\n      previous.next = current.next;\n      current.next.prev = previous;\n\n      // 移除被删元素的 prev next 指针\n      current.prev = null;\n      current.next = null;\n    }\n    this.count--;\n    return current.element;\n  }\n\n  indexOf(element) {\n    let current = this.head;\n    let index = 0;\n    while (current.next !== null) {\n      if (this.equalsFn(element, current.element)) {\n        return index;\n      }\n      index++;\n    }\n    return -1;\n  }\n\n  getHead() {\n    return this.head;\n  }\n\n  getTail() {\n    return this.tail;\n  }\n\n  clear() {\n    super.clear();\n    this.tail = null;\n  }\n\n  toString() {\n    if (this.head === null) {\n      return \"\";\n    }\n\n    let objString = `${this.head.element}`;\n    let current = this.head.next;\n    // 这里使用 != 而不使用 !==， 因为 current 有时可能为 undefined\n    while (current != null) {\n      objString = `${objString},${current.element}`;\n      current = current.next;\n    }\n    return objString;\n  }\n\n  // 反向打印链表\n  inverseToString() {\n    if (this.tail === null) {\n      return \"\";\n    }\n    let objString = `${this.tail.element}`;\n    let previous = this.tail.prev;\n    // 这里使用 != 而不使用 !==， 因为 current 有时可能为 undefined\n    while (previous != null) {\n      objString = `${objString},${previous.element}`;\n      previous = previous.prev;\n    }\n    return objString;\n  }\n}\n","import { defaultCompare, Compare } from \"../utils/index.js\";\nimport { BalanceFactor } from \"../utils/index.js\";\nimport { BinarySearchTree, Node } from \"./19.BinarySearchTree.js\";\n\nexport class AVLTree extends BinarySearchTree {\n  constructor(compareFn = defaultCompare) {\n    super(compareFn);\n  }\n\n  // 获取节点高度\n  getNodeHeight(node) {\n    if (node == null) {\n      // 这里空节点（叶子节点）返回 -1，可以根据下面的 return 推导出来\n      return -1;\n    }\n\n    // 节点的高度是从节点到其任意子节点的边的最大值\n    // 父节点的高度都比子节点的高度 +1， 不容置疑，所以要 +1\n    return (\n      Math.max(this.getNodeHeight(node.left), this.getNodeHeight(node.right)) +\n      1\n    );\n  }\n\n  // 获取平衡因子\n  getBalanceFactor(node) {\n    // 这里算的平衡因子 = 左侧子节点高度 - 右侧子节点高度\n    const heightDifference =\n      this.getNodeHeight(node.left) - this.getNodeHeight(node.right);\n    switch (heightDifference) {\n      case -2:\n        return BalanceFactor.UNBALANCED_RIGHT;\n      case -1:\n        return BalanceFactor.SLIGHTLY_UNBALANCED_RIGHT;\n      case 1:\n        return BalanceFactor.SLIGHTLY_UNBALANCED_LEFT;\n      case 2:\n        return BalanceFactor.UNBALANCED_LEFT;\n      default:\n        return BalanceFactor.BALANCED;\n    }\n  }\n\n  // 左-左：向右的单旋转。左侧失衡\n  rotationLL(node) {\n    const tmp = node.left;\n    node.left = tmp.right;\n    tmp.right = node;\n    return tmp;\n  }\n\n  // 右-右(RR)：向左的单旋转。右侧失衡\n  rotationRR(node) {\n    const tmp = node.right;\n    node.right = tmp.left;\n    tmp.left = node;\n    return tmp;\n  }\n\n  // 左-右(LR)：向右的双旋转\n  // 左侧子节点的高度大于右侧子节点的高度，并且左侧子节点右侧较重\n  rotationLR(node) {\n    node.left = this.rotationRR(node.left); // 相当于对 node.left 进行一个左旋转\n    return this.rotationLL(node); // 再对 node 进行一个右旋转\n  }\n\n  // 右-左(RL)：向左的双旋转\n  // 右侧子节点的高度大于左侧子节点的高度，并且右侧子节点左侧较重\n  rotationRL(node) {\n    node.right = this.rotationLL(node.right); // 相当于对 node.right 进行一个右旋转\n    return this.rotationRR(node); // 再对 node 进行一个左旋转\n  }\n\n  insert(key) {\n    // 每次 insertNode 都是对 this.root 的重新赋值\n    this.root = this.insertNode(this.root, key);\n  }\n  insertNode(node, key) {\n    // 像在 BST 树中一样插入节点\n    if (node == null) {\n      return new Node(key);\n    } else if (this.compareFn(key, node.key) === Compare.LESS_THAN) {\n      node.left = this.insertNode(node.left, key);\n    } else if (this.compareFn(key, node.key) === Compare.BIGGER_THAN) {\n      node.right = this.insertNode(node.right, key);\n    } else {\n      return node; // 重复的键\n    }\n\n    // 如果需要，将树进行平衡操作\n    const balanceFactor = this.getBalanceFactor(node);\n    // 树的左侧失衡（较重）\n    if (balanceFactor === BalanceFactor.UNBALANCED_LEFT) {\n      // 与 node.left 对比，若是小于 node.left， 说明 key 在 node.left 的左侧，直接一个右旋转就可以平衡\n      if (this.compareFn(key, node.left.key) === Compare.LESS_THAN) {\n        node = this.rotationLL(node);\n      } else {\n        // 否则，key 大于 node.left， 说明 key 在 node.left 的右侧，换句话说是，左侧子节点右侧较重\n        // 需要对 node.left 进行一个左旋转， 再对 node 进行一个右旋转\n        // 这两个旋转的合成就是 rotationLR\n        return this.rotationLR(node);\n      }\n    }\n\n    // 树的右侧较重\n    if (balanceFactor === BalanceFactor.UNBALANCED_RIGHT) {\n      // 与 node.right 对比，若是 key 大于 node.right， 说明 key 在 node.right 的右侧，直接一个左旋转就可以平衡\n      if (this.compareFn(key, node.right.key) === Compare.BIGGER_THAN) {\n        node = this.rotationRR(node);\n      } else {\n        // 否则，key 小于 node.right，说明 key 在 node.right 的左侧，换句话说是，右侧子节点左侧较重\n        // 需要对 node.right 先进行一个右旋转，再对 node 进行一个左旋转\n        // 这两个旋转的合成就是 rotationRL\n        return this.rotationRL(node);\n      }\n    }\n\n    // 返回 node 的目的是，操作了节点后对该节点进行返回， 最终返回的是操作后的 root 节点\n    // 其实每次 insertNode 都是对 this.root 的重新赋值\n    return node;\n  }\n\n  removeNode(node, key) {\n    node = super.removeNode(node, key);\n    if (node == null) {\n      return node; // null，不需要进行平衡\n    }\n    // 检测树是否平衡\n    const balanceFactor = this.getBalanceFactor(node);\n    // 左侧较重\n    if (balanceFactor === BalanceFactor.UNBALANCED_LEFT) {\n      const balanceFactorLeft = this.getBalanceFactor(node.left);\n      // 左侧的左节点较重\n      if (balanceFactorLeft === BalanceFactor.SLIGHTLY_UNBALANCED_LEFT) {\n        return this.rotationLL(node);\n      }\n      // 左侧的右节点较重\n      if (balanceFactorLeft === BalanceFactor.SLIGHTLY_UNBALANCED_RIGHT) {\n        return this.rotationLR(node.left);\n      }\n    }\n    // 右侧较重\n    if (balanceFactor === BalanceFactor.UNBALANCED_RIGHT) {\n      const balanceFactorRight = this.getBalanceFactor(node.right);\n      // 右侧的右节点较重\n      if (balanceFactorRight === BalanceFactor.SLIGHTLY_UNBALANCED_RIGHT) {\n        return this.rotationRR(node);\n      }\n      // 右侧的左节点较重\n      if (balanceFactorRight === BalanceFactor.SLIGHTLY_UNBALANCED_LEFT) {\n        return this.rotationRL(node.right);\n      }\n    }\n    return node;\n  }\n}\n","import { defaultCompare } from \"../utils/index.js\";\nimport { Colors, Compare } from \"../utils/index.js\";\nimport { Node, BinarySearchTree } from \"./19.BinarySearchTree.js\";\n\nexport class RedBlackNode extends Node {\n  constructor(key) {\n    super(key);\n    this.color = Colors.RED;\n    this.parent = null;\n  }\n\n  isRed() {\n    return this.color === Colors.RED;\n  }\n}\n\nexport class RedBlackTree extends BinarySearchTree {\n  constructor(compareFn = defaultCompare) {\n    super(compareFn);\n  }\n\n  insert(key) {\n    if (this.root == null) {\n      this.root = new RedBlackNode(key);\n      this.root.color = Colors.BLACK;\n    } else {\n      // newNode 是当前插入的那个节点\n      const newNode = this.insertNode(this.root, key);\n      this.fixTreeProperties(newNode);\n    }\n  }\n\n  insertNode(node, key) {\n    if (this.compareFn(key, node.key) === Compare.LESS_THAN) {\n      if (node.left == null) {\n        // 逻辑和二叉搜索树中的一样,不同之处在于保存了指向被插入节点父节点的引用\n        node.left = new RedBlackNode(key);\n        node.left.parent = node;\n        return node.left;\n      } else {\n        return this.insertNode(node.left, key);\n      }\n    } else {\n      if (node.right == null) {\n        node.right = new RedBlackNode(key);\n        node.right.parent = node;\n        return node.right;\n      } else {\n        return this.insertNode(node.right, key);\n      }\n    }\n  }\n\n  // 在插入节点后验证红黑树属性\n  fixTreeProperties(node) {\n    while (\n      node &&\n      node.parent &&\n      node.parent.isRed() &&\n      node.color !== Colors.BLACK\n    ) {\n      let parent = node.parent;\n      const grandParent = parent.parent;\n      // 情形 A: 父节点是左侧子节点\n      if (grandParent && grandParent.left === parent) {\n        const uncle = grandParent.right;\n        if (uncle && uncle.isRed()) {\n          grandParent.color = Colors.RED;\n          uncle.color = Colors.BLACK;\n          parent.color = Colors.BLACK;\n          node = grandParent;\n        } else {\n          // 情形 2A： 节点是右侧子节点（左侧的右子树较重） -- 左旋转\n          if (node === parent.right) {\n            this.rotationRR(parent);\n            node = parent;\n            parent = node.parent;\n          }\n          // 情形 3A：节点是左侧子节点 -- 右旋转\n          this.rotationLL(grandParent);\n          parent.color = Colors.BLACK;\n          grandParent.color = Colors.RED;\n          node = parent;\n        }\n      } else {\n        // 情形 B: 父节点是右侧子节点\n        const uncle = grandParent.left;\n        if (uncle && uncle.isRed()) {\n          grandParent.color = Colors.RED;\n          uncle.color = Colors.BLACK;\n          parent.color = Colors.BLACK;\n          node = grandParent;\n        } else {\n          // 情形 2B：节点是左侧子节点——左旋转\n          if (node === parent.left) {\n            this.rotationLL(parent);\n            node = parent;\n            parent = node.parent;\n          }\n          // 情形 3B：节点是右侧子节点——左旋转\n          this.rotationRR(grandParent);\n          parent.color = Colors.BLACK;\n          grandParent.color = Colors.RED;\n          node = parent;\n        }\n      }\n\n      this.root.color = Colors.BLACK;\n    }\n  }\n\n  rotationLL(node) {\n    const tmp = node.left;\n    node.left = tmp.right;\n    if (tmp.right && tmp.right.key) {\n      tmp.right.parent = node;\n    }\n    tmp.parent = node.parent;\n    if (!node.parent) {\n      this.root = tmp;\n    } else {\n      if (node === node.parent.left) {\n        node.parent.left = tmp;\n      } else {\n        node.parent.right = tmp;\n      }\n    }\n    tmp.right = node;\n    node.parent = tmp;\n  }\n\n  rotationRR(node) {\n    const tmp = node.right;\n    node.right = tmp.left;\n    if (tmp.left && tmp.left.key) {\n      tmp.left.parent = node;\n    }\n    tmp.parent = node.parent; \n    if (!node.parent) {\n      this.root = tmp;\n    } else {\n      if (node === node.parent.left) {\n        node.parent.left = tmp;\n      } else {\n        node.parent.right = tmp;\n      }\n    }\n    tmp.left = node;\n    node.parent = tmp;\n  }\n}\n","import { defaultCompare, swap, Compare, reverseCompare } from \"../utils/index.js\";\n\nexport class MinHeap {\n  constructor(compareFn = defaultCompare) {\n    this.compareFn = compareFn;\n    this.heap = [];\n  }\n\n  // 获取左侧节点下标\n  getLeftIndex(index) {\n    return 2 * index + 1;\n  }\n\n  // 获取右侧节点下标\n  getRightIndex(index) {\n    return 2 * index + 2;\n  }\n\n  // 获取父级节点下标\n  getParentIndex(index) {\n    if (index === 0) {\n      return undefined;\n    }\n    return Math.floor((index - 1) / 2);\n  }\n\n  // 插入一个新的值。如果插入成功，它返回 true，否则返回 false\n  insert(value) {\n    if (value != null) {\n      const index = this.heap.length;\n      this.heap.push(value);\n      this.siftUp(index);\n      return true;\n    }\n    return false;\n  }\n\n  siftUp(index) {\n    let parent = this.getParentIndex(index);\n    while (\n      index > 0 &&\n      this.compareFn(this.heap[parent], this.heap[index]) ===\n        Compare.BIGGER_THAN\n    ) {\n      swap(this.heap, parent, index);\n      index = parent;\n      parent = this.getParentIndex(index);\n    }\n  }\n\n  size() {\n    return this.heap.length;\n  }\n\n  isEmpty() {\n    return this.size() === 0;\n  }\n\n  // 移除最小值（最小堆）或最大值（最大堆），并返回这个值\n  extract() {\n    if (this.isEmpty()) {\n      return undefined;\n    }\n    if (this.size() === 1) {\n      return this.heap.shift();\n    }\n    const removedValue = this.heap[0];\n    this.heap[0] = this.heap.pop();\n    this.siftDown(0);\n    return removedValue;\n  }\n\n  siftDown(index) {\n    let element = index;\n    const left = this.getLeftIndex(index);\n    const right = this.getRightIndex(index);\n    const size = this.size();\n    if (\n      left < size &&\n      this.compareFn(this.heap[element], this.heap[left]) ===\n        Compare.BIGGER_THAN\n    ) {\n      element = left;\n    }\n    if (\n      right < size &&\n      this.compareFn(this.heap[element], this.heap[right]) ===\n        Compare.BIGGER_THAN\n    ) {\n      element = right;\n    }\n    if (index !== element) {\n      swap(this.heap, index, element);\n      this.siftDown(element);\n    }\n  }\n\n  // 返回最小值（最小堆）或最大值（最大堆）且不会移除这个值\n  findMinimum() {\n    return this.isEmpty() ? undefined : this.heap[0];\n  }\n}\n\n// 最大堆\nexport class MaxHeap extends MinHeap {\n  constructor(compareFn = defaultCompare) {\n    super(compareFn);\n    this.compareFn = reverseCompare(compareFn);\n  }\n}","import { Dictionary } from \"../code/14.Dictionary.js\";\n\nexport class Graph {\n  constructor(isDirected = false) {\n    this.isDirected = isDirected;\n    this.vertices = [];\n    this.adjList = new Dictionary();\n  }\n\n  addVertex(v) {\n    if (!this.vertices.includes(v)) {\n      this.vertices.push(v);\n      this.adjList.set(v, []);\n    }\n  }\n\n  addEdge(v, w) {\n    if (!this.adjList.get(v)) {\n      this.addVertex(v);\n    }\n    if (!this.adjList.get(w)) {\n      this.addVertex(w);\n    }\n    this.adjList.get(v).push(w);\n    if (!this.isDirected) {\n      this.adjList.get(w).push(v);\n    }\n  }\n\n  getVertices() {\n    return this.vertices;\n  }\n  getAdjList() {\n    return this.adjList;\n  }\n\n  toString() {\n    let s = \"\";\n    for (let i = 0; i < this.vertices.length; i++) {\n      s += `${this.vertices[i]} -> `;\n      const neighbors = this.adjList.get(this.vertices[i]);\n      for (let j = 0; j < neighbors.length; j++) {\n        s += `${neighbors[j]} `;\n      }\n      s += \"\\n\";\n    }\n    return s;\n  }\n}\n","import { Queue } from \"../code/11.Queue\";\n\nconst Colors = {\n  WHITE: 0,\n  GREY: 1,\n  BLACK: 2,\n};\n\nconst initializeColor = (vertices) => {\n  const color = {};\n\n  for (let i = 0; i < vertices.length; i++) {\n    color[vertices[i]] = Colors.WHITE;\n  }\n\n  return color;\n};\n\nexport const breadthFirstSearch = (graph, startVertex, callback) => {\n  const vertices = graph.getVertices();\n  const adjList = graph.getAdjList();\n  const color = initializeColor(vertices);\n  const queue = new Queue();\n\n  queue.enqueue(startVertex);\n\n  while (!queue.isEmpty()) {\n    const u = queue.dequeue();\n    const neighbors = adjList.get(u);\n\n    color[u] = Colors.GREY;\n\n    // 将 u 元素的字典数据全部访问完成，再将 u 设置为完全访问(black)\n    for (let i = 0; i < neighbors.length; i++) {\n      const w = neighbors[i];\n\n      // 如果 u 字典里面的元素没有被访问过，则设置为访问过（灰色），再将该元素进入队列\n      if (color[w] === Colors.WHITE) {\n        color[w] = Colors.GREY;\n        queue.enqueue(w);\n      }\n    }\n\n    color[u] = Colors.BLACK;\n\n    if (callback) {\n      callback(u);\n    }\n  }\n};\n\nexport const BFS = (graph, startVertex) => {\n  const vertices = graph.getVertices();\n  const adjList = graph.getAdjList();\n  const color = initializeColor(vertices);\n  const queue = new Queue();\n  const distances = {};\n  const predecessors = {};\n\n  queue.enqueue(startVertex);\n\n  for (let i = 0; i < vertices.length; i++) {\n    distances[vertices[i]] = 0;\n    predecessors[vertices[i]] = null;\n  }\n\n  while (!queue.isEmpty()) {\n    const u = queue.dequeue();\n    const neighbors = adjList.get(u);\n\n    color[u] = Colors.GREY;\n\n    for (let i = 0; i < neighbors.length; i++) {\n      const w = neighbors[i];\n\n      if (color[w] === Colors.WHITE) {\n        color[w] = Colors.GREY;\n        distances[w] = distances[u] + 1;\n        predecessors[w] = u;\n        queue.enqueue(w);\n      }\n    }\n\n    color[u] = Colors.BLACK;\n  }\n\n  return {\n    distances,\n    predecessors, // 前溯点数组\n  };\n};\n","import { defaultEquals } from \"../utils/index.js\";\nimport { Node, LinkList } from \"./1.LinkList.js\";\n\nexport class CircularLinkedList extends LinkList {\n  constructor(equalsFn = defaultEquals) {\n    super(equalsFn);\n  }\n\n  insert(element, index) {\n    if (index < 0 || index > this.count) {\n      return false;\n    }\n    let node = new Node(element);\n    let current = this.head;\n    if (index === 0) {\n      if (this.head === null) {\n        this.head = node;\n        node.next = node;\n      } else {\n        node.next = current;\n        current = this.getElementAt(this.count - 1);\n        this.head = node;\n        current.next = this.head;\n      }\n    } else {\n      let previous = this.getElementAt(index - 1);\n      node.next = previous.next;\n      previous.next = node;\n    }\n    this.count++;\n    return true;\n  }\n\n  removeAt(index) {\n    if (index < 0 || index >= this.count) {\n      return;\n    }\n    let current = this.head;\n    if (index === 0) {\n      if (this.count === 1) {\n        this.head = null;\n      } else {\n        const removed = this.head;\n        current = this.getElementAt(this.count - 1);\n        this.head = this.head.next;\n        current.next = this.head;\n        current = removed;\n      }\n    } else {\n      let previous = this.getElementAt(index - 1);\n      current = previous.next;\n      previous.next = current.next;\n    }\n    this.count--;\n    return current.element;\n  }\n}\n","import { defaultEquals, defaultCompare } from \"../utils/index.js\";\nimport { LinkList } from \"./1.LinkList.js\";\n\nexport class SortedLinkedList extends LinkList {\n  constructor(equalsFn = defaultEquals, compareFn = defaultCompare) {\n    super(equalsFn);\n    this.compareFn = compareFn;\n  }\n\n  push(element) {\n    if (this.count === 0) {\n      return super.push(element);\n    } else {\n      const index = this.getIndexNextSortedElement(element);\n      return super.insert(element, index);\n    }\n  }\n  \n  insert(element) {\n    if (this.count === 0) {\n      return super.insert(element, 0);\n    } else {\n      const index = this.getIndexNextSortedElement(element);\n      return super.insert(element, index);\n    }\n  }\n\n  getIndexNextSortedElement(element) {\n    let current = this.head;\n    let i = 0;\n    for (; i < this.count && current; i++) {\n      const compare = this.compareFn(element, current.element);\n      if (compare === Compare.LESS_THAN) {\n        return i;\n      }\n      current = current.next;\n    }\n    return i;\n  }\n}\n","import { defaultEquals } from \"../utils/index.js\";\nimport { DoublyLinkedList } from \"./2.DoublyLinkedList.js\";\n\nexport class StackLinkedList {\n  constructor(equalsFn = defaultEquals) {\n    this.items = new DoublyLinkedList();\n  }\n\n  push(element) {\n    this.items.push(element);\n  }\n\n  pop() {\n    if (this.items.isEmpty()) {\n      return;\n    }\n    return this.items.removeAt(this.items.size() - 1);\n  }\n}\n","export class Stack {\n  constructor() {\n    this.items = [];\n  }\n\n  push(element) {\n    this.items.push(element);\n  }\n\n  pop() {\n    if (this.isEmpty()) {\n      return;\n    }\n    this.items.pop();\n  }\n\n  peek() {\n    return this.items[this.count - 1];\n  }\n\n  isEmpty() {\n    return this.items.length === 0;\n  }\n\n  clear() {\n    this.items = [];\n  }\n}\n","export class ObjectStack {\n  constructor() {\n    this.items = {};\n    this.count = 0;\n  }\n\n  push(element) {\n    this.items[this.count] = element;\n    this.count++;\n  }\n\n  pop() {\n    if (this.isEmpty()) {\n      return;\n    }\n    const result = this.items[this.count - 1];\n    delete this.items[this.count - 1];\n    this.count--;\n    return result;\n  }\n\n  peek() {\n    return this.items[this.count - 1];\n  }\n\n  isEmpty() {\n    return this.count === 0;\n  }\n\n  clear() {\n    this.items = {};\n    this.count = 0;\n\n    // while (this.count) {\n    //   this.pop();\n    // }\n  }\n}\n","const _items = Symbol(\"stackItems\");\nexport class SymbolStack {\n  constructor() {\n    this[_items] = [];\n  }\n\n  push(element) {\n    this[_items].push(element);\n  }\n\n  pop() {\n    if (this.isEmpty()) {\n      return;\n    }\n    this[_items].pop();\n  }\n\n  peek() {\n    return this[_items][this.count - 1];\n  }\n\n  isEmpty() {\n    return this[_items].length === 0;\n  }\n\n  clear() {\n    this[_items] = [];\n  }\n}\n","const items = new WeakMap();\n\nexport class WeakMapStack {\n  constructor() {\n    items.set(this, []);\n  }\n\n  push(element) {\n    const res = items.get(this);\n    res.push(element);\n  }\n\n  pop() {\n    if (this.isEmpty()) {\n      return;\n    }\n    const res = items.get(this);\n    const data = res.pop();\n    return data;\n  }\n\n  peek() {\n    const res = items.get(this);\n    return res[res.length - 1];\n  }\n\n  isEmpty() {\n    const res = items.get(this);\n    return res.length === 0;\n  }\n\n  size() {\n    const res = items.get(this);\n    return res.length;\n  }\n\n  clear() {\n    items.set(this, []);\n  }\n\n  toString() {\n    if (this.isEmpty()) {\n      return \"\";\n    }\n    const result = items.get(this);\n    let objString = `${result[0]}`;\n    for (let i = 1; i < result.length; i++) {\n      objString = `${objString},${result[i]}`;\n    }\n    return objString;\n  }\n}\n","import { defaultCompare, swap, Compare } from \"../utils/index.js\";\n\nexport const bubbleSort = (array, compareFn = defaultCompare) => {\n  let length = array.length;\n\n  for (let i = 0; i < length; i++) {\n    for (let j = 0; j < length - 1 - i; j++) {\n      // length - 1: 两两比较， n 个元素只需要进行 n-1 次比较\n      // length - 1 - i: 再 -i，原因是每轮循环最后一个元素元素其实已经排好序了，不需要再比较\n      if (compareFn(array[j], array[j + 1]) === Compare.BIGGER_THAN) {\n        swap(array, j, j + 1);\n      }\n    }\n  }\n  return array;\n};\n","import { defaultCompare, swap } from \"../utils/index.js\";\n\n// 堆化函数\nfunction heapify(array, index, heapSize, compareFn) {\n  let largest = index;\n  const left = 2 * index + 1;\n  const right = 2 * index + 2;\n  if (left < heapSize && compareFn(array[left], array[index]) > 0) {\n    largest = left;\n  }\n  if (right < heapSize && compareFn(array[right], array[largest]) > 0) {\n    largest = right;\n  }\n  if (largest !== index) {\n    swap(array, index, largest);\n    heapify(array, largest, heapSize, compareFn);\n  }\n}\n\n// 构建最大堆\nfunction buildMaxHeap(array, compareFn) {\n  /**\n   * 为什么是 Math.floor(array.length / 2)  ？？？ 书本上的解释是错的！！！\n   * \n   * 因为 Math.floor(array.length / 2) 是最后一个叶子节点的父节点\n   * 构建最大堆时，只需要对所有的小堆顶进行位置交换即可\n   * \n   * 此处循环 i 即小堆顶元素下标，\n   * Math.floor(array.length / 2)\n   * Math.floor(array.length / 2) - 1\n   * Math.floor(array.length / 2) - 2\n   * Math.floor(array.length / 2) - 3\n   * ... 依次获取小堆顶\n   * \n   */\n  for (let i = Math.floor(array.length / 2); i >= 0; i--) {\n    heapify(array, i, array.length, compareFn);\n  }\n  return array;\n}\n\nexport default function heapSort(array, compareFn = defaultCompare) {\n  let heapSize = array.length;\n  buildMaxHeap(array, compareFn);\n  \n  // 交换最大堆中元素，每次交换最大堆根元素和最后一个元素\n  // 并减小堆长度\n  // 不断交换直至堆大小为 1，最大堆完成所有交换，排序完成\n  while (heapSize > 1) {\n    swap(array, 0, --heapSize);\n    heapify(array, 0, heapSize, compareFn);\n  }\n  return array;\n}\n","import { defaultCompare, swap, Compare } from \"../utils/index.js\";\n\nexport const selectionSort = (array, compareFn = defaultCompare) => {\n  const { length } = array;\n  let indexMin;\n  // 1、外层循环控制轮数\n  for (let i = 0; i < length - 1; i++) {\n    indexMin = i;\n    // 2、内层循环找出最小值\n    for (let j = i; j < length; j++) {\n      if (compareFn(array[indexMin], array[j]) === Compare.BIGGER_THAN) {\n        indexMin = j;\n      }\n    }\n    if (indexMin !== i) {\n      swap(array, indexMin, i);\n    }\n  }\n  return array;\n};\n","export function defaultEquals(a, b) {\n  return a === b;\n}\n\nexport const Compare = {\n  LESS_THAN: -1,\n  BIGGER_THAN: 1,\n};\n\nexport function defaultCompare(a, b) {\n  if (a === b) {\n    return 0;\n  }\n  return a < b ? Compare.LESS_THAN : Compare.BIGGER_THAN;\n}\n\n// 10 进制转 2 进制\nexport function decimalToBinary(decNumber) {\n  const remStack = new Stack();\n  let number = decNumber;\n  let rem;\n  let binaryString = \"\";\n  while (number > 0) {\n    rem = Math.floor(number % 2);\n    remStack.push(rem);\n    number = Math.floor(number / 2);\n  }\n  while (!remStack.isEmpty()) {\n    binaryString += remStack.pop().toString();\n  }\n  return binaryString;\n}\n\n// 10 进制转 2~36 进制\nexport function baseConverter(decNumber, base) {\n  const remStack = new Stack();\n  const digits = \"0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ\"; // {6}\n  let number = decNumber;\n  let rem;\n  let baseString = \"\";\n  if (!(base >= 2 && base <= 36)) {\n    return \"\";\n  }\n  while (number > 0) {\n    rem = Math.floor(number % base);\n    remStack.push(rem);\n    number = Math.floor(number / base);\n  }\n  while (!remStack.isEmpty()) {\n    baseString += digits[remStack.pop()]; // {7}\n  }\n  return baseString;\n}\n\nexport function defaultToString(item) {\n  if (item === null) {\n    return \"NULL\";\n  } else if (item === undefined) {\n    return \"UNDEFINED\";\n  } else if (typeof item === \"string\" || item instanceof String) {\n    return `${item}`;\n  }\n  return item.toString();\n}\n\nexport const BalanceFactor = {\n  UNBALANCED_RIGHT: 1,\n  SLIGHTLY_UNBALANCED_RIGHT: 2,\n  BALANCED: 3,\n  SLIGHTLY_UNBALANCED_LEFT: 4,\n  UNBALANCED_LEFT: 5,\n};\n\nexport const Colors = {\n  RED: \"red\",\n  BLACK: \"black\",\n};\n\nexport const swap = (array, a, b) => {\n  const temp = array[a];\n  array[a] = array[b];\n  array[b] = temp;\n};\n\nexport const reverseCompare = (compareFn) => {\n  return (a, b) => compareFn(b, a);\n};\n\nexport const createNonSortedArray = (size) => {\n  const array = [];\n  for (let i = size; i > 0; i--) {\n    array.push(i);\n  }\n  return array;\n};\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import { LinkList, Node } from \"./code/1.LinkList.js\";\nimport { DoublyLinkedList, DoublyNode } from \"./code/2.DoublyLinkedList.js\";\nimport { CircularLinkedList } from \"./code/3.CircularLinkedList.js\";\nimport { SortedLinkedList } from \"./code/4.SortedLinkedList.js\";\nimport { StackLinkedList } from \"./code/5.StackLinkedList.js\";\nimport { Stack } from \"./code/6.array-stack.js\";\nimport { ObjectStack } from \"./code/7.object-stack.js\";\nimport { SymbolStack } from \"./code/8.privite-symbol-property-Stack.js\";\nimport { WeakMapStack } from \"./code/9.privite-weakmap-property-Stack.js\";\nimport { DoublyCircularLinkedList } from \"./code/10.DoublyCircularLinkList.js\";\nimport { defaultCompare, defaultEquals, Compare } from \"./utils/index.js\";\nimport { Set } from \"./code/13.Set.js\";\nimport { HashTable } from \"./code/15.HashTable.js\";\nimport { HashTableLinearProbing } from \"./code/17.HashTableLinearProbing.js\";\nimport { BinarySearchTree } from \"./code/19.BinarySearchTree.js\";\nimport { AVLTree } from \"./code/20.AVLTree.js\";\nimport { RedBlackTree } from \"./code/21.RedBlackTree.js\";\nimport { MaxHeap, MinHeap } from \"./code/22.MinHeap.js\";\nimport heapSort from \"./sort/heap-sort.js\";\nimport { Graph } from \"./code/23.Graph.js\";\nimport { breadthFirstSearch, BFS } from \"./code/24.breadth-first-search.js\";\nimport { bubbleSort } from \"./sort/bubble-sort.js\";\nimport { selectionSort } from \"./sort/selection-sort.js\";\n\nconst linklist = new LinkList();\n\nlinklist.push(5);\nlinklist.push(4);\nlinklist.push(3);\nlinklist.push(2);\nlinklist.push(1);\n\n// console.log(linklist);\n\n\nconsole.log(linklist.linklistReverse());\n\nexport {\n  LinkList,\n  Node,\n  DoublyLinkedList,\n  DoublyNode,\n  CircularLinkedList,\n  SortedLinkedList,\n  StackLinkedList,\n  ObjectStack,\n  SymbolStack,\n  Stack,\n  WeakMapStack,\n  DoublyCircularLinkedList,\n  defaultCompare,\n  defaultEquals,\n  Compare,\n};\n"],"names":["defaultEquals","Node","element","next","LinkList","equalsFn","count","head","node","current","index","previous","getElementAt","i","indexOf","removeAt","size","undefined","objString","temp","remove","insert","recursion","DoublyLinkedList","DoublyNode","DoublyCircularLinkedList","tail","prev","isEmpty","Queue","lowestCount","items","result","string","Set","has","Object","prototype","hasOwnProperty","call","keys","length","values","defaultToString","ValuePair","key","value","Dictionary","toStrFn","table","tableKey","hasKey","keyValues","map","valuePair","callbackFn","valuePairs","HashTable","hash","charCodeAt","loseloseHashCode","hashKey","hashCode","HashTableLinearProbing","position","Compare","defaultCompare","left","right","BinarySearchTree","compareFn","root","insertNode","LESS_THAN","callback","inOrderTraverseNode","preOrderTraverseNode","postOrderTraverseNode","minNode","maxNode","searchNode","BIGGER_THAN","removeNode","aux","BalanceFactor","AVLTree","Math","max","getNodeHeight","heightDifference","UNBALANCED_RIGHT","SLIGHTLY_UNBALANCED_RIGHT","SLIGHTLY_UNBALANCED_LEFT","UNBALANCED_LEFT","BALANCED","tmp","rotationRR","rotationLL","balanceFactor","getBalanceFactor","rotationLR","rotationRL","balanceFactorLeft","balanceFactorRight","Colors","RedBlackNode","color","RED","parent","RedBlackTree","BLACK","newNode","fixTreeProperties","isRed","grandParent","uncle","swap","reverseCompare","MinHeap","heap","floor","push","siftUp","getParentIndex","shift","removedValue","pop","siftDown","getLeftIndex","getRightIndex","MaxHeap","Graph","isDirected","vertices","adjList","v","includes","set","w","get","addVertex","s","neighbors","j","WHITE","GREY","initializeColor","breadthFirstSearch","graph","startVertex","getVertices","getAdjList","queue","enqueue","u","dequeue","BFS","distances","predecessors","CircularLinkedList","removed","SortedLinkedList","getIndexNextSortedElement","compare","StackLinkedList","Stack","ObjectStack","_items","Symbol","SymbolStack","WeakMap","WeakMapStack","res","data","bubbleSort","array","heapify","heapSize","largest","buildMaxHeap","heapSort","selectionSort","indexMin","a","b","decimalToBinary","decNumber","remStack","number","rem","binaryString","toString","baseConverter","base","digits","baseString","item","String","createNonSortedArray","linklist","console","log","linklistReverse"],"sourceRoot":""}