{
  "stats": {
    "suites": 5,
    "tests": 10,
    "passes": 10,
    "pending": 0,
    "failures": 0,
    "start": "2021-09-18T13:24:44.743Z",
    "end": "2021-09-18T13:24:44.799Z",
    "duration": 56,
    "testsRegistered": 10,
    "passPercent": 100,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "1c02c1af-109b-4e62-bafd-1b24360fc9e7",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "73b50b5f-4232-480d-831d-c569a81bb776",
          "title": "广度优先遍历测试",
          "fullFile": "C:\\workpalce\\data-structures-and-algorithms-by-javascript\\test\\breadth-first-search.spec.js",
          "file": "\\test\\breadth-first-search.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "广度优先遍历",
              "fullTitle": "广度优先遍历测试 广度优先遍历",
              "timedOut": false,
              "duration": 7,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var res = [];\nvar printVertex = function printVertex(value) {\n  // console.log(\"Visited vertex: \" + value);\n  res.push(value);\n};\nvar graph = new _Graph.Graph();\nvar myVertices = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"];\nfor (var i = 0; i < myVertices.length; i++) {\n  graph.addVertex(myVertices[i]);\n}\ngraph.addEdge(\"A\", \"B\");\ngraph.addEdge(\"A\", \"C\");\ngraph.addEdge(\"A\", \"D\");\ngraph.addEdge(\"C\", \"D\");\ngraph.addEdge(\"C\", \"G\");\ngraph.addEdge(\"D\", \"G\");\ngraph.addEdge(\"D\", \"H\");\ngraph.addEdge(\"B\", \"E\");\ngraph.addEdge(\"B\", \"F\");\ngraph.addEdge(\"E\", \"I\");\n(0, _breadthFirstSearch.breadthFirstSearch)(graph, myVertices[0], printVertex);\n(0, _chai.expect)(res.join(\",\")).to.equal(myVertices.join(\",\"));\nvar shortestPathA = (0, _breadthFirstSearch.BFS)(graph, myVertices[0]);\nvar expectDistances = {\n  A: 0,\n  B: 1,\n  C: 1,\n  D: 1,\n  E: 2,\n  F: 2,\n  G: 2,\n  H: 2,\n  I: 3\n};\nvar expectPredecessors = {\n  A: null,\n  B: \"A\",\n  C: \"A\",\n  D: \"A\",\n  E: \"B\",\n  F: \"B\",\n  G: \"C\",\n  H: \"D\",\n  I: \"E\"\n};\nvar distances = shortestPathA.distances,\n    predecessors = shortestPathA.predecessors;\n(0, _chai.expect)(JSON.stringify(distances)).to.equal(JSON.stringify(expectDistances));\n(0, _chai.expect)(JSON.stringify(predecessors)).to.equal(JSON.stringify(expectPredecessors));",
              "err": {},
              "uuid": "8266d9c9-7b9d-45f3-b618-f98afca3ea4b",
              "parentUUID": "73b50b5f-4232-480d-831d-c569a81bb776",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "8266d9c9-7b9d-45f3-b618-f98afca3ea4b"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 7,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "225220d7-ce23-4b82-9cb6-6976e8f0cee6",
          "title": "图",
          "fullFile": "C:\\workpalce\\data-structures-and-algorithms-by-javascript\\test\\graph.spec.js",
          "file": "\\test\\graph.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "图测试",
              "fullTitle": "图 图测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var graph = new _Graph.Graph();\nvar myVertices = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"];\nfor (var i = 0; i < myVertices.length; i++) {\n  graph.addVertex(myVertices[i]);\n}\ngraph.addEdge(\"A\", \"B\");\ngraph.addEdge(\"A\", \"C\");\ngraph.addEdge(\"A\", \"D\");\ngraph.addEdge(\"C\", \"D\");\ngraph.addEdge(\"C\", \"G\");\ngraph.addEdge(\"D\", \"G\");\ngraph.addEdge(\"D\", \"H\");\ngraph.addEdge(\"B\", \"E\");\ngraph.addEdge(\"B\", \"F\");\ngraph.addEdge(\"E\", \"I\");\nvar adjList = graph.getAdjList();\nvar expextResult = {\n  A: \"B,C,D\",\n  B: \"A,E,F\",\n  C: \"A,D,G\",\n  D: \"A,C,G,H\",\n  E: \"B,I\",\n  F: \"B\",\n  G: \"C,D\",\n  H: \"D\",\n  I: \"E\"\n};\nfor (var key in expextResult) {\n  (0, _chai.expect)(adjList.get(key).join(\",\")).to.equal(expextResult[key]);\n} // A -> B C D\n// B -> A E F\n// C -> A D G\n// D -> A C G H\n// E -> B I\n// F -> B\n// G -> C D\n// H -> D\n// I -> E",
              "err": {},
              "uuid": "b42bfb1b-9052-4594-8069-1413220b1bd3",
              "parentUUID": "225220d7-ce23-4b82-9cb6-6976e8f0cee6",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "b42bfb1b-9052-4594-8069-1413220b1bd3"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 0,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "444973bf-112e-4b6e-8557-491c5f8fc536",
          "title": "堆排序测试",
          "fullFile": "C:\\workpalce\\data-structures-and-algorithms-by-javascript\\test\\heap-sort.spec.js",
          "file": "\\test\\heap-sort.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "堆排序正序测试",
              "fullTitle": "堆排序测试 堆排序正序测试",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var originData = [72, 16, 5, 234, 23, 92, 109]; // 默认构建最大堆\nvar res = (0, _heapSort[\"default\"])(originData);\nvar expectRes = [5, 16, 23, 72, 92, 109, 234];\n(0, _chai.expect)(res.join(\",\")).to.equal(expectRes.join(\",\"));",
              "err": {},
              "uuid": "6d8234de-d868-4436-ac19-067e81a28538",
              "parentUUID": "444973bf-112e-4b6e-8557-491c5f8fc536",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "堆排序逆序测试",
              "fullTitle": "堆排序测试 堆排序逆序测试",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var originData = [72, 16, 5, 234, 23, 92, 109]; // 构建最小堆\nvar res = (0, _heapSort[\"default\"])(originData, (0, _utils.reverseCompare)(_utils.defaultCompare));\nvar expectRes = [5, 16, 23, 72, 92, 109, 234];\n(0, _chai.expect)(res.join(\",\")).to.equal(expectRes.reverse().join(\",\"));",
              "err": {},
              "uuid": "d737580f-ca3f-4728-9310-d2f0305b3e5c",
              "parentUUID": "444973bf-112e-4b6e-8557-491c5f8fc536",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "6d8234de-d868-4436-ac19-067e81a28538",
            "d737580f-ca3f-4728-9310-d2f0305b3e5c"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 1,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "c65317b1-135b-41bc-bffa-5823b2f44de2",
          "title": "红黑树单元测试",
          "fullFile": "C:\\workpalce\\data-structures-and-algorithms-by-javascript\\test\\red-black-tree.spec.js",
          "file": "\\test\\red-black-tree.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "1.测试节点颜色非红即黑",
              "fullTitle": "红黑树单元测试 1.测试节点颜色非红即黑",
              "timedOut": false,
              "duration": 9,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "tree.inOrderTraverse(function (node) {\n  var RED = _index.Colors.RED,\n      BLACK = _index.Colors.BLACK;\n  (0, _chai.expect)([RED, BLACK]).to.include(node.color);\n});",
              "err": {},
              "uuid": "aef41148-003e-45bf-ace3-9fe0185e7934",
              "parentUUID": "c65317b1-135b-41bc-bffa-5823b2f44de2",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "2.测试根节点颜色是黑色",
              "fullTitle": "红黑树单元测试 2.测试根节点颜色是黑色",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "(0, _chai.expect)(tree.root.isRed()).to.equal(false);",
              "err": {},
              "uuid": "504de94e-1437-4146-892c-3665d3288cfd",
              "parentUUID": "c65317b1-135b-41bc-bffa-5823b2f44de2",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "aef41148-003e-45bf-ace3-9fe0185e7934",
            "504de94e-1437-4146-892c-3665d3288cfd"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 9,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "a6edb15c-9a48-478e-8389-2bdede62eeae",
          "title": "排序测试",
          "fullFile": "C:\\workpalce\\data-structures-and-algorithms-by-javascript\\test\\sort.spec.js",
          "file": "\\test\\sort.spec.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "冒泡排序",
              "fullTitle": "排序测试 冒泡排序",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var array = (0, _utils.createNonSortedArray)(5);\nvar originArray = _toConsumableArray(array);\nvar result = (0, _bubbleSort.bubbleSort)(array);\n(0, _chai.expect)(result.join(\",\")).to.equal(originArray.reverse().join(\",\"));",
              "err": {},
              "uuid": "1b23cdcf-2e53-4206-9e83-f5f431fd3a91",
              "parentUUID": "a6edb15c-9a48-478e-8389-2bdede62eeae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "选择排序",
              "fullTitle": "排序测试 选择排序",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var array = (0, _utils.createNonSortedArray)(5);\nvar originArray = _toConsumableArray(array);\nvar result = (0, _selectionSort.selectionSort)(array);\n(0, _chai.expect)(result.join(\",\")).to.equal(originArray.reverse().join(\",\"));",
              "err": {},
              "uuid": "79deda82-ba63-4ea4-a0e4-94f5eca1caf7",
              "parentUUID": "a6edb15c-9a48-478e-8389-2bdede62eeae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "插入排序",
              "fullTitle": "排序测试 插入排序",
              "timedOut": false,
              "duration": 0,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var array = (0, _utils.createNonSortedArray)(5);\nvar originArray = _toConsumableArray(array);\nvar result = (0, _insertSort.insertionSort)(array);\n(0, _chai.expect)(result.join(\",\")).to.equal(originArray.reverse().join(\",\"));",
              "err": {},
              "uuid": "82253565-a90b-493e-bbce-5c60a6c23d15",
              "parentUUID": "a6edb15c-9a48-478e-8389-2bdede62eeae",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "插入排序",
              "fullTitle": "排序测试 插入排序",
              "timedOut": false,
              "duration": 1,
              "state": "passed",
              "speed": "fast",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "var array = (0, _utils.createNonSortedArray)(5);\nvar originArray = _toConsumableArray(array);\nvar result = (0, _mergeSort.mergeSort)(array);\n(0, _chai.expect)(result.join(\",\")).to.equal(originArray.reverse().join(\",\"));",
              "err": {},
              "uuid": "530ff7ed-6c95-48f2-8cb2-775d849a73ed",
              "parentUUID": "a6edb15c-9a48-478e-8389-2bdede62eeae",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "1b23cdcf-2e53-4206-9e83-f5f431fd3a91",
            "79deda82-ba63-4ea4-a0e4-94f5eca1caf7",
            "82253565-a90b-493e-bbce-5c60a6c23d15",
            "530ff7ed-6c95-48f2-8cb2-775d849a73ed"
          ],
          "failures": [],
          "pending": [],
          "skipped": [],
          "duration": 3,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "9.1.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "6.2.2"
    },
    "marge": {
      "options": null,
      "version": "5.2.0"
    }
  }
}